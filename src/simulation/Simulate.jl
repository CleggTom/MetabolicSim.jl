"""
   simulate(x0::Vector{Float64}, p::Parameters; t_start=0.0, t_end=1.0)

Function to do simple simulation given starting abundances `x0` and a time range `t_start` to `t_end`.
"""
function simulate(x0::Vector{Float64}, p::Parameters; t_start=0.0, t_end=1.0)
    prob = OrdinaryDiffEq.ODEProblem(dx!,x0,(t_start,t_end),deepcopy(p))
    sol = DiffEqBase.solve(prob, OrdinaryDiffEq.Rosenbrock23() )
    return(sol)
end

"""
simulate(x0::Vector{Float64}, p::Parameters, assembly::Any; t_start=0.0, t_end=1.0)

Function to do a simulation with assembly rules as dictated by the callback function `assembly`. The assembly parameter must be generated by either the `add_at_equilibrium` or `add_at_t` functions. 
"""
function simulate(x0::Vector{Float64}, p::Parameters, assembly_rules::Any; t_start=0.0, t_end=1.0)
    #for equilibrium assembly
    if assembly_rules[1] == :equilibrium
        prob = OrdinaryDiffEq.ODEProblem(dx!,x0,(t_start,t_end),deepcopy(p))
        sol = DiffEqBase.solve(prob, OrdinaryDiffEq.Rosenbrock23(), callback = assembly_rules[2])
    #for given t_stops assembly
    elseif assembly_rules[1] == :at_time_stop
        prob = DiffEqCallbacks.ODEProblem(dx!,x0,(t_start,t_end),deepcopy(p))
        sol = DiffEqBase.solve(prob, OrdinaryDiffEq.Rosenbrock23(), callback = assembly_rules[2], tstops = assembly_rules[3])
    else
        error("Incorrect assembly process specfified. Please see ?simulate")
    end

    return(sol)
end

